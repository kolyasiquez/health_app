// lib/screens/auth/registration_screen.dart

import 'dart:developer';
// import 'dart:io'; // üöÄ –í–ò–î–ê–õ–ï–ù–û
import 'package:flutter/material.dart';
import 'package:health_app/screens/auth/auth_service.dart';
import 'package:health_app/services/api_service.dart';
// import 'package:image_picker/image_picker.dart'; // üöÄ –í–ò–î–ê–õ–ï–ù–û

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({super.key});

  @override
  State<RegistrationScreen> createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final _auth = AuthService();
  // final _apiService = ApiService(); // üöÄ –ë–Ü–õ–¨–®–ï –ù–ï –ü–û–¢–†–Ü–ë–ï–ù –¢–£–¢

  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  final _bioController = TextEditingController(); // üöÄ –î–õ–Ø –ë–Ü–û–ì–†–ê–§–Ü–á –õ–Ü–ö–ê–†–Ø

  UserRole _selectedRole = UserRole.patient;
  bool _isLoading = false;
  // File? _licenseFile; // üöÄ –í–ò–î–ê–õ–ï–ù–û

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _bioController.dispose(); // üöÄ
    super.dispose();
  }

  // üöÄ –ú–ï–¢–û–î '_pickLicenseFile' –í–ò–î–ê–õ–ï–ù–û

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final primaryTeal = theme.colorScheme.primary;

    return Scaffold(
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const SizedBox(height: 60),
              Icon(Icons.favorite, size: 100, color: primaryTeal),
              const SizedBox(height: 20),
              Text(
                '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç',
                style: theme.textTheme.headlineSmall,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 40),

              SegmentedButton<UserRole>(
                style: SegmentedButton.styleFrom(
                  selectedBackgroundColor: primaryTeal.withOpacity(0.1),
                  selectedForegroundColor: primaryTeal,
                  foregroundColor: theme.textTheme.bodyMedium?.color,
                ),
                segments: const [
                  ButtonSegment<UserRole>(
                    value: UserRole.patient,
                    label: Text('–Ø - –ü–∞—Ü—ñ—î–Ω—Ç'),
                    icon: Icon(Icons.person_outline),
                  ),
                  ButtonSegment<UserRole>(
                    value: UserRole.doctor,
                    label: Text('–Ø - –õ—ñ–∫–∞—Ä'),
                    icon: Icon(Icons.medical_services_outlined),
                  ),
                ],
                selected: {_selectedRole},
                onSelectionChanged: (Set<UserRole> newSelection) {
                  setState(() {
                    _selectedRole = newSelection.first;
                  });
                },
              ),

              const SizedBox(height: 30),
              TextField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: '–Ü–º\'—è',
                  prefixIcon: Icon(Icons.person),
                ),
              ),
              const SizedBox(height: 20),
              TextField(
                controller: _emailController,
                keyboardType: TextInputType.emailAddress,
                decoration: const InputDecoration(
                  labelText: '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞',
                  prefixIcon: Icon(Icons.email),
                ),
              ),
              const SizedBox(height: 20),
              TextField(
                controller: _passwordController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: '–ü–∞—Ä–æ–ª—å',
                  prefixIcon: Icon(Icons.lock),
                ),
              ),
              const SizedBox(height: 20),
              TextField(
                controller: _confirmPasswordController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å',
                  prefixIcon: Icon(Icons.lock),
                ),
              ),

              // üöÄüöÄüöÄ –û–ù–û–í–õ–ï–ù–Ü –ü–û–õ–Ø –î–õ–Ø –õ–Ü–ö–ê–†–Ø (–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢) üöÄüöÄüöÄ
              AnimatedCrossFade(
                duration: const Duration(milliseconds: 300),
                firstChild: Column(
                  children: [
                    const SizedBox(height: 20),
                    // –ü–æ–ª–µ –¥–ª—è –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—ó
                    TextField(
                      controller: _bioController,
                      decoration: const InputDecoration(
                        labelText: '–ü—Ä–æ —Å–µ–±–µ (–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è, –¥–æ—Å–≤—ñ–¥)',
                        prefixIcon: Icon(Icons.description_outlined),
                      ),
                      maxLines: 3,
                    ),
                    // üöÄ –ö–ù–û–ü–ö–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–ê–ô–õ–£ –í–ò–î–ê–õ–ï–ù–ê
                  ],
                ),
                secondChild: Container(), // –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                crossFadeState: _selectedRole == UserRole.doctor
                    ? CrossFadeState.showFirst
                    : CrossFadeState.showSecond,
              ),
              // üöÄüöÄüöÄ –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –î–õ–Ø –õ–Ü–ö–ê–†–Ø üöÄüöÄüöÄ

              const SizedBox(height: 30),
              ElevatedButton(
                onPressed: _isLoading ? null : _signup,
                child: _isLoading
                    ? const CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                )
                    : const Text('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'),
              ),
              const SizedBox(height: 10),
              TextButton(
                onPressed: _isLoading ? null : () => Navigator.pop(context),
                child: const Text(
                  '–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? –£–≤—ñ–π—Ç–∏',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // üöÄüöÄüöÄ –°–ü–†–û–©–ï–ù–ê –õ–û–ì–Ü–ö–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–á üöÄüöÄüöÄ
  _signup() async {
    // 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ü–ê–†–û–õ–Ü–í
    if (_passwordController.text != _confirmPasswordController.text) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞: –ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.')),
        );
      }
      return;
    }

    // 2. –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–õ–Ø –õ–Ü–ö–ê–†–Ø
    if (_selectedRole == UserRole.doctor) {
      if (_bioController.text.trim().isEmpty) { // üöÄ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ 'bio'
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                content: Text(
                    '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ.')),
          );
        }
        return;
      }
    }

    setState(() { _isLoading = true; });

    try {
      // 3. –°–¢–í–û–†–Æ–Ñ–ú–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê. 'bio' –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É.
      final user = await _auth.createUserWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text,
        _nameController.text.trim(),
        _selectedRole,
        // üöÄ –ü–µ—Ä–µ–¥–∞—î–º–æ 'bio' —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ª—ñ–∫–∞—Ä
        bio: _selectedRole == UserRole.doctor
            ? _bioController.text.trim()
            : null,
      );

      if (user == null) {
        throw Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
      }

      // 4. –û–ë–†–û–ë–ö–ê –ó–ê–õ–ï–ñ–ù–û –í–Ü–î –†–û–õ–Ü
      if (_selectedRole == UserRole.doctor) {
        // 4–∞. –õ–Ü–ö–ê–†: –í—Å–µ –≥–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        // (–§–∞–π–ª –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ)
        log("Doctor created, pending verification.");
        if (mounted) {
          Navigator.pushReplacementNamed(context, '/pending_verification');
        }

      } else {
        // 4–±. –ü–ê–¶–Ü–Ñ–ù–¢: –í—Å–µ –≥–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
        log("Patient created successfully.");
        if (mounted) {
          Navigator.pushReplacementNamed(context, '/patient_dashboard');
        }
      }

    } catch (e) {
      log("Registration failed: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${e.toString()}')),
        );
      }
    } finally {
      if(mounted) {
        setState(() { _isLoading = false; });
      }
    }
  }
}