// lib/screens/auth/auth_service.dart

import 'dart:developer';
import 'package:firebase_auth/firebase_auth.dart';
import '../../services/api_service.dart'; // üöÄ –Ü–ú–ü–û–†–¢–£–Ñ–ú–û (—ñ UserRole)

class AuthService {
  final _auth = FirebaseAuth.instance;
  final ApiService _apiService = ApiService(); // üöÄ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–£–Ñ–ú–û

  // üöÄ –û–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î 'bio' —è–∫ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —ñ–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  Future<User?> createUserWithEmailAndPassword(
      String email, String password, String name, UserRole role, {String? bio}) async {
    try {
      // üöÄ –ü–ï–†–ï–í–Ü–†–ö–ê –õ–Ü–ú–Ü–¢–£ –ê–î–ú–Ü–ù–Ü–í (—è–∫—â–æ —Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–∞)
      if (role == UserRole.admin) {
        await _apiService.checkAdminLimit();
      }

      // 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firebase Auth
      final cred = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);
      final user = cred.user;

      if (user != null) {
        // 2. –ö–õ–Æ–ß–û–í–ò–ô –ö–†–û–ö: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –≤ Firestore
        //    –ü–µ—Ä–µ–¥–∞—î–º–æ 'bio' –≤ ApiService
        await _apiService.createUserDocument(user.uid, email, name, role, bio: bio);
      }
      return user;
    } on FirebaseAuthException catch (e) {
      log("Registration failed: ${e.message}");
      // –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± UI –º—ñ–≥ —ó—ó –æ–±—Ä–æ–±–∏—Ç–∏
      rethrow;
    } catch (e) {
      log("Something went wrong during registration: $e");
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥ –≤—Ö–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.
  Future<User?> loginUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final cred =
      await _auth.signInWithEmailAndPassword(email: email, password: password);
      return cred.user;
    } on FirebaseAuthException catch (e) {
      log("Login failed: ${e.message}");
      rethrow;
    } catch (e) {
      log("Something went wrong during login: $e");
      rethrow;
    }
  }

  Future<void> signOut() async {
    try {
      await _auth.signOut();
    } catch (e) {
      log("Something went wrong during sign out: $e");
    }
  }
}