// lib/screens/admin/admin_dashboard_screen.dart

import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:health_app/services/api_service.dart';
import 'package:health_app/screens/auth/auth_service.dart';

class AdminDashboardScreen extends StatefulWidget {
  const AdminDashboardScreen({super.key});

  @override
  State<AdminDashboardScreen> createState() => _AdminDashboardScreenState();
}

class _AdminDashboardScreenState extends State<AdminDashboardScreen> {
  final ApiService _apiService = ApiService();
  bool _isLoading = true;
  List<QueryDocumentSnapshot> _pendingDoctors = [];
  String _errorMessage = '';

  @override
  void initState() {
    super.initState();
    _fetchPendingDoctors();
  }

  Future<void> _fetchPendingDoctors() async {
    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });
    try {
      final snapshot = await _apiService.getPendingDoctors();
      setState(() {
        _pendingDoctors = snapshot.docs;
        _isLoading = false;
      });
    } catch (e) {
      log('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—ñ–≤: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e')),
        );
      }
      setState(() {
        _isLoading = false;
        _errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: $e \n\n(–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Debug Console –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É Firestore!)';
      });
    }
  }

  Future<void> _approveDoctor(String uid) async {
    try {
      await _apiService.approveDoctor(uid);
      setState(() {
        _pendingDoctors.removeWhere((doc) => doc.id == uid);
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–õ—ñ–∫–∞—Ä—è —Å—Ö–≤–∞–ª–µ–Ω–æ.'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      log('–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: $e')),
        );
      }
    }
  }

  // üöÄüöÄüöÄ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î _denyDoctor - –ó–ù–û–í–£ –í–ò–ö–õ–ò–ö–ê–Ñ –í–ò–î–ê–õ–ï–ù–ù–Ø üöÄüöÄüöÄ
  // –í—ñ–¥—Ö–∏–ª—è—î–º–æ –ª—ñ–∫–∞—Ä—è —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ –∑ Firestore
  Future<void> _denyDoctor(String uid) async {
    try {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ Firestore
      await _apiService.denyDoctor(uid);

      // –û–Ω–æ–≤–ª—é—î–º–æ UI
      setState(() {
        _pendingDoctors.removeWhere((doc) => doc.id == uid);
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–õ—ñ–∫–∞—Ä—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –≤–∏–¥–∞–ª–µ–Ω–æ.'),
            backgroundColor: Colors.red, // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä
          ),
        );
      }
    } catch (e) {
      log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e')),
        );
      }
    }
  }
  // üöÄüöÄüöÄ –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–ù–Ø üöÄüöÄüöÄ


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _fetchPendingDoctors,
          ),
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await AuthService().signOut();
              if (mounted) {
                Navigator.of(context).pushNamedAndRemoveUntil('/', (route) => false);
              }
            },
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _buildDoctorList(theme),
    );
  }

  Widget _buildDoctorList(ThemeData theme) {
    if (_errorMessage.isNotEmpty) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            _errorMessage,
            style: const TextStyle(color: Colors.red, fontSize: 16),
            textAlign: TextAlign.center,
          ),
        ),
      );
    }

    if (_pendingDoctors.isEmpty) {
      return Center(
        child: Text(
          '–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.',
          style: theme.textTheme.titleMedium,
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 8),
      itemCount: _pendingDoctors.length,
      itemBuilder: (context, index) {
        final doctor = _pendingDoctors[index];
        final data = doctor.data() as Map<String, dynamic>;

        return Card(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    CircleAvatar(
                      backgroundColor: theme.colorScheme.primary.withOpacity(0.1),
                      child: Text(
                        data['name']?.substring(0, 1) ?? '?',
                        style: TextStyle(color: theme.colorScheme.primary, fontWeight: FontWeight.bold),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(data['name'] ?? '–ë–µ–∑ —ñ–º–µ–Ω—ñ', style: theme.textTheme.titleMedium),
                          Text(data['email'] ?? '–ë–µ–∑ –ø–æ—à—Ç–∏', style: theme.textTheme.bodyMedium),
                        ],
                      ),
                    ),
                  ],
                ),
                const Divider(height: 24.0),
                Text(
                    '–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è (–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è, –¥–æ—Å–≤—ñ–¥):',
                    style: theme.textTheme.bodySmall
                ),
                const SizedBox(height: 4),
                Text(
                  data['bio'] ?? '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                  style: theme.textTheme.bodyLarge,
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => _showDenyDialog(doctor.id),
                      style: TextButton.styleFrom(foregroundColor: Colors.red),
                      child: const Text('–í—ñ–¥—Ö–∏–ª–∏—Ç–∏'),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () => _approveDoctor(doctor.id),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        minimumSize: const Size(0, 36), // –í–ê–ñ–õ–ò–í–û: –ó–∞–ª–∏—à–∏—Ç–∏ —Ü–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                      ),
                      child: const Text('–°—Ö–≤–∞–ª–∏—Ç–∏'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // üöÄüöÄüöÄ –û–ù–û–í–õ–ï–ù–ò–ô –î–Ü–ê–õ–û–ì _showDenyDialog üöÄüöÄüöÄ
  // –î—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
  void _showDenyDialog(String uid) {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è'), // –û–Ω–æ–≤–ª–µ–Ω–æ
        content: const Text(
          '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ —Ü—å–æ–≥–æ –ª—ñ–∫–∞—Ä—è –∑ –±–∞–∑–∏?\n\n(–í–ê–ñ–õ–ò–í–û: –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤—Ä—É—á–Ω—É –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∞–∫–∞—É–Ω—Ç –∑ Firebase Authentication.)', // –û–Ω–æ–≤–ª–µ–Ω–æ
        ),
        actions: [
          TextButton(
            child: const Text('–°–∫–∞—Å—É–≤–∞—Ç–∏'),
            onPressed: () => Navigator.of(ctx).pop(),
          ),
          TextButton(
            style: TextButton.styleFrom(foregroundColor: Colors.red), // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–π
            child: const Text('–í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ'), // –û–Ω–æ–≤–ª–µ–Ω–æ
            onPressed: () {
              Navigator.of(ctx).pop();
              _denyDoctor(uid); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥
            },
          ),
        ],
      ),
    );
  }
// üöÄüöÄüöÄ –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–ù–Ø üöÄüöÄüöÄ
}