// lib/services/api_service.dart

import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

// üöÄ –í–ò–ó–ù–ê–ß–ê–Ñ–ú–û –†–û–õ–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í
enum UserRole { patient, doctor, admin }

class ApiService {
  final _firestore = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  // Ìó¨ –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ
  String _getCollectionForRole(UserRole role) {
    switch (role) {
      case UserRole.patient:
        return 'patients';
      case UserRole.doctor:
        return 'doctors';
      case UserRole.admin:
        return 'admins';
    }
  }

  // Ìó¨ –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –Ω–∞–∑–≤–∏ —Ä–æ–ª—ñ
  String _getCollectionForRoleString(String role) {
    switch (role) {
      case 'patient':
        return 'patients';
      case 'doctor':
      case 'pending_doctor': // üöÄ –û–ë–ò–î–í–Ü –†–û–õ–Ü –ñ–ò–í–£–¢–¨ –í –ö–û–õ–ï–ö–¶–Ü–á 'doctors'
        return 'doctors';
      case 'admin':
        return 'admins';
      default:
        throw Exception('–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å: $role');
    }
  }

  // üöÄ –û–ë–ú–ï–ñ–ï–ù–ù–Ø –î–õ–Ø –ê–î–ú–Ü–ù–Ü–í
  Future<void> checkAdminLimit() async {
    final adminQuery = await _firestore.collection('admins').limit(2).get();
    if (adminQuery.docs.length >= 2) {
      throw Exception("–õ—ñ–º—ñ—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (2) –≤–∂–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ.");
    }
  }

  // üöÄ –û–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î 'bio' (–¥–ª—è –ª—ñ–∫–∞—Ä—ñ–≤) –æ–¥—Ä–∞–∑—É
  Future<void> createUserDocument(String uid, String email, String name, UserRole role, {String? bio}) async {
    const String defaultAvatarPath = 'assets/images/default_person.png';
    final String collectionPath = _getCollectionForRole(role);

    // üöÄ –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –¥–ª—è –∑–∞–ø–∏—Å—É –≤ –ë–î
    String documentRole;
    if (role == UserRole.doctor) {
      documentRole = 'pending_doctor';
    } else if (role == UserRole.patient) {
      documentRole = 'patient';
    } else {
      documentRole = 'admin';
    }

    final userData = {
      'email': email,
      'name': name,
      'createdAt': FieldValue.serverTimestamp(),
      'avatarUrl': defaultAvatarPath,
      'age': null,
      'role': documentRole, // üöÄ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ù–û–í–£ –†–û–õ–¨
      'bio': (role == UserRole.doctor) ? bio : null, // üöÄ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ë–Ü–û –û–î–†–ê–ó–£
      'licenseUrl': null, // (–ú–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ, –∞–ª–µ –ª–∏—à–∞—î–º–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏)
    };

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–∫–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Å (batch) –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—ñ
    final batch = _firestore.batch();

    // 1. –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó
    final userDocRef = _firestore.collection(collectionPath).doc(uid);
    batch.set(userDocRef, userData);

    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ "–¥–æ–≤—ñ–¥–∫–æ–≤–∏–π" –∑–∞–ø–∏—Å –ø—Ä–æ —Ä–æ–ª—å
    final roleDocRef = _firestore.collection('user_roles').doc(uid);
    batch.set(roleDocRef, {'role': documentRole});

    await batch.commit();
  }

  // üöÄ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–•
  Future<Map<String, dynamic>?> getUserData() async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      // 1. –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ–≤—ñ–¥–∫–æ–≤–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
      final roleDoc = await _firestore.collection('user_roles').doc(user.uid).get();
      if (!roleDoc.exists) {
        log('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–ª—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.uid}');
        return null;
      }

      final role = roleDoc.data()?['role'] as String?;
      if (role == null) {
        log('–ü–æ–º–∏–ª–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç —Ä–æ–ª—ñ –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.uid}');
        return null;
      }

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
      final collectionPath = _getCollectionForRoleString(role);
      final doc = await _firestore.collection(collectionPath).doc(user.uid).get();
      return doc.data();

    } catch (e) {
      log('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $e');
      return null;
    }
  }

  // üöÄ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î –û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ
  Future<void> updateUserProfile(Map<String, dynamic> data) async {
    final user = _auth.currentUser;
    if (user == null) {
      throw Exception("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–≤—ñ–π—à–æ–≤ —É —Å–∏—Å—Ç–µ–º—É.");
    }
    if (data.isEmpty) return;

    try {
      // 1. –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      final roleDoc = await _firestore.collection('user_roles').doc(user.uid).get();
      if (!roleDoc.exists) {
        throw Exception('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–ª—ñ.');
      }
      final role = roleDoc.data()?['role'] as String?;
      if (role == null) {
        throw Exception('–ü–æ–º–∏–ª–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç —Ä–æ–ª—ñ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
      }

      // 2. –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó
      final collectionPath = _getCollectionForRoleString(role);
      await _firestore.collection(collectionPath).doc(user.uid).update(data);

    } catch (e) {
      log('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: $e');
      throw Exception('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: $e');
    }
  }

  // --- –ú–ï–¢–û–î–ò –î–õ–Ø –ê–î–ú–Ü–ù–ê ---

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ê–¥–º—ñ–Ω–∞: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª—ñ–∫–∞—Ä—ñ–≤ –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
  Future<QuerySnapshot> getPendingDoctors() {
    return _firestore
        .collection('doctors')
        .where('role', isEqualTo: 'pending_doctor')
        .get();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ê–¥–º—ñ–Ω–∞: –°—Ö–≤–∞–ª–∏—Ç–∏ –ª—ñ–∫–∞—Ä—è
  Future<void> approveDoctor(String uid) async {
    final batch = _firestore.batch();
    final docRef = _firestore.collection('doctors').doc(uid);
    batch.update(docRef, {'role': 'doctor'});
    final roleRef = _firestore.collection('user_roles').doc(uid);
    batch.update(roleRef, {'role': 'doctor'});
    await batch.commit();
  }

  // üöÄüöÄüöÄ –ü–û–í–ï–†–¢–ê–Ñ–ú–û –ú–ï–¢–û–î denyDoctor –ó –í–ò–î–ê–õ–ï–ù–ù–Ø–ú –î–ê–ù–ò–• üöÄüöÄüöÄ
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ê–¥–º—ñ–Ω–∞: –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –ª—ñ–∫–∞—Ä—è (–≤–∏–¥–∞–ª—è—î —Ç—ñ–ª—å–∫–∏ –∑ –ë–î)
  Future<void> denyDoctor(String uid) async {
    // ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –¶–µ–π –º–µ—Ç–æ–¥ –Ω–µ –≤–∏–¥–∞–ª—è—î –∞–∫–∞—É–Ω—Ç –∑ Firebase Auth.

    final batch = _firestore.batch();

    // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó 'doctors'
    final docRef = _firestore.collection('doctors').doc(uid);
    batch.delete(docRef);

    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ä–æ–ª—å –∑ 'user_roles'
    final roleRef = _firestore.collection('user_roles').doc(uid);
    batch.delete(roleRef);

    await batch.commit();
    log("Firestore data deleted for user $uid. Remember to delete from Authentication manually.");
  }
// üöÄüöÄüöÄ –ö–Ü–ù–ï–¶–¨ –ü–û–í–ï–†–ù–ï–ù–û–ì–û –ú–ï–¢–û–î–£ üöÄüöÄüöÄ

}